function partXY = convertBinaryMatrixToIndices(m)
if nargin<1
    

    
        m = [...
0 0 0 0 0 0 0 0 ;
0 1 0 1 1 1 1 0 ;
0 1 0 1 0 0 1 0 ;
0 1 0 1 0 0 1 0 ;
0 1 0 0 0 0 1 0 ;
0 1 1 0 1 1 1 0 ;
0 0 0 0 0 0 0 0 ;]; 
    
%     m = [...
% 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
% 0 0 1 0 1 1 1 1 1 1 1 1 0 0 0 0 0;
% 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0;
% 0 0 1 0 1 0 1 1 1 1 0 1 0 0 0 0 0;
% 0 0 1 0 1 0 1 0 0 1 0 1 0 0 0 0 0;
% 0 0 1 0 1 0 1 0 0 1 0 1 0 0 0 0 0;
% 0 0 1 0 1 0 1 0 0 1 0 1 0 0 0 0 0;
% 0 0 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0;
% 0 0 1 0 1 1 1 1 1 1 0 1 0 0 0 0 0;
% 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0;
% 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0;
% 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];   
    
% m = [1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1;
% 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1;
% 1 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1;
% 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1;
% 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1;
% 1 1 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0 1 1 0 1 1;
% 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 1 0 1 1 0 1 1;
% 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 1 0 1 1 0 1 1;
% 1 1 0 1 1 0 1 1 0 1 1 0 0 0 1 1 0 1 1 0 1 1;
% 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 1 0 1 1 0 1 1;
% 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 1 0 1 1 0 1 1;
% 1 1 0 1 1 0 1 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1;
% 1 1 0 1 1 0 1 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1;
% 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 1 0 1 1 0 1 1;
% 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1;
% 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1;
% 1 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1;
% 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1;
% 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1;
% 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1;
% 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1;
% 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1];
end

[x,y] = find(m==1);
format compact
numel(x)
partXY = [x,y];

outputString1 = sprintf('%d, ', x);
outputString2 = sprintf('%d, ', y);
outputString = sprintf('[%s;...\n%s]'';', outputString1, outputString2);
display(outputString)
